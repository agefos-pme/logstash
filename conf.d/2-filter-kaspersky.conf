filter {

  if [type] == "wineventlog" {

    mutate {
      gsub => [
        "message", "\r\n", " ",
        "message", "\n", " ",
        "message", "\t", " ",
        "message", "\$", " ",
        "message", "  ", " ",
        "message", "   ", " "
              ]
    }

    if [level] == "Erreur" and [log_name] == "Kaspersky Event Log" and [source_name] == "kladminserver" {

       mutate {
         remove_field => [ "beat" ]
         rename => [
           "computer_name", "host",
           "count", "kaspersky_count",
           "event_id", "kaspersky_event_id",
           "level", "kaspersky_level", 
           "log_name", "kaspersky_log_name",
           "record_number", "kaspersky_record_number",
           "source_name", "kaspersky_source_name"
                   ]
         convert => [
            "kaspersky_count", "integer",
            "kaspersky_event_id", "integer",
            "kaspersky_record_number", "integer"
                    ]
         update => { "type" => "kaspersky-log" } 
       }

       if [type] == "kaspersky-log" and [kaspersky_event_id] == 260 {

         grok {
           keep_empty_captures => true
           named_captures_only => true
           break_on_match => true
#           patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.4.0/patterns"
           patterns_dir => "/etc/logstash/patterns/"
           match => { "message" => [ "%{KASPERSKY_VIRUS_MESSAGE}" ] }
           add_tag => "kaspersky_virus_groked"
           tag_on_failure => [ "kaspersky_virus_ungroked" ]
         }

         if "kaspersky_virus_groked" in [tags] {

           date {
             locale => "fr"
             match => [ "kaspersky_timestamp", "EEEE  d MMMM yyyy HH:mm:ss", "EEEE dd MMMM yyyy HH:mm:ss" ]
             target => "kaspersky_timestamp_real"
           }

           mutate {
             remove_field => [ "kaspersky_timestamp" ]
             gsub => [ "kaspersky_virus_path", " ", "" ]
           }

           mutate {
             gsub => [ "kaspersky_virus_path", "[\\]", " " ]
             split => { "kaspersky_virus_path" => " " }
             add_field => { "kaspersky_virus_exe_file" => "%{[kaspersky_virus_path][-1]}" }
           }

           ruby {
             code => "event['kaspersky_virus_path'].pop()"
           }

           mutate {
             join => { "kaspersky_virus_path" => "\"" }
             gsub => [ "kaspersky_virus_path", "[\\]", "" ]
           }

           mutate {
             gsub => [ "kaspersky_virus_path", "[\\]", "" ]
           }

#           dns {
#             resolve => [ "kaspersky_workstation" ]
#             add_field => { "kaspersky_workstation_ip" => "%{[kaspersky_workstation][-1]}" }
#           }

#           ruby {
#             code => "event['kaspersky_workstation'].pop()"
#           }

#           mutate {
#             join => { "kaspersky_workstation" => "" }
#           }

           ruby {
             code => "event.to_hash.delete_if {|field, value| value.nil? }"
           }

#         if "kaspersky_virus_ungroked" in [tags] {

          } else {

              mutate {
                add_field => {
                  "kaspersky_virus_ungroked_messages" => "%{message}"
                  "kaspersky_timestamp_real" => "%{@timestamp}"
                }
              }
          }

       } else if [type] == "kaspersky-log" and [kaspersky_event_id] == 10 {

           grok {
             keep_empty_captures => true
             named_captures_only => true
             break_on_match => true
#             patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.4.0/patterns"
             patterns_dir => "/etc/logstash/patterns/"
             match => { "message" => [ "%{KASPERSKY_VIRUS_MESSAGE}" ] }
             add_tag => "kaspersky_virus_state_groked"
             tag_on_failure => [ "kaspersky_virus_state_ungroked" ]
           }

           if "kaspersky_virus_state_groked" in [tags] {

             date {
               locale => "fr"
               match => [ "kaspersky_timestamp", "EEEE  d MMMM yyyy HH:mm:ss", "EEEE dd MMMM yyyy HH:mm:ss" ]
               target => "kaspersky_timestamp_real"
             }

             mutate {
               remove_field => [ "kaspersky_timestamp" ]
               gsub => [ "kaspersky_virus_path", " ", "" ]
             }

             mutate {
               gsub => [ "kaspersky_virus_path", "[\\]", " " ]
               split => { "kaspersky_virus_path" => " " }
               add_field => { "kaspersky_virus_exe_file" => "%{[kaspersky_virus_path][-1]}" }
             }

             ruby {
               code => "event['kaspersky_virus_path'].pop()"
             }

             mutate {
               join => { "kaspersky_virus_path" => "\"" }
               gsub => [ "kaspersky_virus_path", "[\\]", "" ]
             }

             mutate {
               gsub => [ "kaspersky_virus_path", "[\\]", "" ]
             }

#             dns {
#               resolve => [ "kaspersky_workstation" ]
#               add_field => { "kaspersky_workstation_ip" => "%{[kaspersky_workstation][-1]}" }
#             }

#             ruby {
#               code => "event['kaspersky_workstation'].pop()"
#             }

#             mutate {
#               join => { "kaspersky_workstation" => "" }
#             }

             ruby {
               code => "event.to_hash.delete_if {|field, value| value.nil? }"
             }

#           if "kaspersky_virus_state_ungroked" in [tags] {

           } else { 

               mutate {
                 add_field => {
                   "kaspersky_virus_state_ungroked_messages" => "%{message}"
                   "kaspersky_timestamp_real" => "%{@timestamp}"
                 }
               }
           }

       } else if [type] == "kaspersky-log" and [kaspersky_event_id] == 5 {

           grok {
             keep_empty_captures => true
             named_captures_only => true
             break_on_match => true
#             patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.4.0/patterns"
             patterns_dir => "/etc/logstash/patterns/"
             match => { "message" => [ "%{KASPERSKY_THREAT_MESSAGE}" ] }
             add_tag => "kaspersky_threat_groked"
             tag_on_failure => [ "kaspersky_threat_ungroked" ]
           }

           if "kaspersky_threat_groked" in [tags] {

             date {
               locale => "fr"
               match => [ "kaspersky_timestamp", "EEEE  d MMMM yyyy HH:mm:ss", "EEEE dd MMMM yyyy HH:mm:ss" ]
               target => "kaspersky_timestamp_real"
             }

             mutate {
               remove_field => [ "kaspersky_timestamp" ]
               gsub => [ "kaspersky_threat_path", " ", "" ]
             }

             mutate {
               gsub => [ "kaspersky_threat_path", "[\\]", " " ]
               split => { "kaspersky_threat_path" => " " }
               add_field => { "kaspersky_threat_exe_file" => "%{[kaspersky_threat_path][-1]}" }
             }

             ruby {
               code => "event['kaspersky_threat_path'].pop()"
             }

             mutate {
               join => { "kaspersky_threat_path" => "\"" }
               gsub => [ "kaspersky_threat_path", "[\\]", "" ]
             }

             mutate {
               gsub => [ "kaspersky_threat_path", "[\\]", "" ]
             }

#             dns {
#               resolve => [ "kaspersky_workstation" ]
#               add_field => { "kaspersky_workstation_ip" => "%{[kaspersky_workstation][-1]}" }
#             }

#             ruby {
#               code => "event['kaspersky_workstation'].pop()"
#             }

#             mutate {
#               join => { "kaspersky_workstation" => "" }
#             }

             ruby {
               code => "event.to_hash.delete_if {|field, value| value.nil? }"
             }

#           if "kaspersky_threat_ungroked" in [tags] {

           } else {

               mutate {
                 add_field => {
                   "kaspersky_threat_ungroked_messages" => "%{message}"
                   "kaspersky_timestamp_real" => "%{@timestamp}"
                 }
               }
           }

       } else if [type] == "kaspersky-log" and [kaspersky_event_id] == 261 or [kaspersky_event_id] == 259 {

           grok {
             keep_empty_captures => true
             named_captures_only => true
             break_on_match => true
#             patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.4.0/patterns"
             patterns_dir => "/etc/logstash/patterns/"
             match => { "message" => [ "%{KASPERSKY_MALWARE_MESSAGE}" ] }
             add_tag => "kaspersky_malware_groked"
             tag_on_failure => [ "kaspersky_malware_ungroked" ]
           }

           if "kaspersky_malware_groked" in [tags] {

             date {
               locale => "fr"
               match => [ "kaspersky_timestamp", "EEEE  d MMMM yyyy HH:mm:ss", "EEEE dd MMMM yyyy HH:mm:ss" ]
               target => "kaspersky_timestamp_real"
             }

             mutate {
               remove_field => [ "kaspersky_timestamp" ]
               gsub => [ "kaspersky_malware_path", " ", "" ]
             }

             mutate {
               gsub => [ "kaspersky_malware_path", "[\\]", " " ]
               split => { "kaspersky_malware_path" => " " }
               add_field => { "kaspersky_malware_exe_file" => "%{[kaspersky_malware_path][-1]}" }
             }

             ruby {
               code => "event['kaspersky_malware_path'].pop()"
             }

             mutate {
               join => { "kaspersky_malware_path" => "\"" }
               gsub => [ "kaspersky_malware_path", "[\\]", "" ]
             }

             mutate {
               gsub => [ "kaspersky_malware_path", "[\\]", "" ]
             }

#             dns {
#               resolve => [ "kaspersky_workstation" ]
#               add_field => { "kaspersky_workstation_ip" => "%{[kaspersky_workstation][-1]}" }
#             }

#             ruby {
#               code => "event['kaspersky_workstation'].pop()"
#             }

#             mutate {
#               join => { "kaspersky_workstation" => "" }
#             }

             ruby {
               code => "event.to_hash.delete_if {|field, value| value.nil? }"
             }

#           if "kaspersky_malware_ungroked" in [tags] {

           } else {

               mutate {
                 add_field => {
                   "kaspersky_malware_ungroked_messages" => "%{message}"
                   "kaspersky_timestamp_real" => "%{@timestamp}"
                 }
               }
           }

       } else if [type] == "kaspersky-log" and [kaspersky_event_id] == 4113 {

           grok {
             keep_empty_captures => true
             named_captures_only => true
             break_on_match => true
#             patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.4.0/patterns"
             patterns_dir => "/etc/logstash/patterns/"
             match => { "message" => [ "%{KASPERSKY_WORKSTATION_RISK_MESSAGE}" ] }
             add_tag => "kaspersky_workstation_risk_groked"
             tag_on_failure => [ "kaspersky_workstation_risk_ungroked" ]
           }

           if "kaspersky_workstation_risk_groked" {

             date {
               locale => "fr"
               match => [ "kaspersky_timestamp", "EEEE  d MMMM yyyy HH:mm:ss", "EEEE dd MMMM yyyy HH:mm:ss" ]
               target => "kaspersky_timestamp_real"
             }

             mutate {
               remove_field => [ "kaspersky_timestamp" ]
             }

#             dns {
#               resolve => [ "kaspersky_workstation" ]
#               add_field => { "kaspersky_workstation_ip" => "%{[kaspersky_workstation][-1]}" }
#             }

#             ruby {
#               code => "event['kaspersky_workstation'].pop()"
#             }

#             mutate {
#               join => { "kaspersky_workstation" => "" }
#             }

             ruby {
               code => "event.to_hash.delete_if {|field, value| value.nil? }"
             }

#           if "kaspersky_workstation_risk_ungroked" in [tags] {

           } else {
 
               mutate {
                 add_field => {
                   "kaspersky_workstation_risk_ungroked_messages" => "%{message}"
                   "kaspersky_timestamp_real" => "%{@timestamp}"
                 }
               }
           }

       } else if [type] == "kaspersky-log" and [kaspersky_event_id] == 26 {

           grok {
             keep_empty_captures => true
             named_captures_only => true
             break_on_match => true
#             patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.4.0/patterns"
             patterns_dir => "/etc/logstash/patterns/"
             match => { "message" => [ "%{KASPERSKY_ATTACK_ALERT_MESSAGE}" ] }
             add_tag => "kaspersky_attack_alert_groked"
             tag_on_failure => [ "kaspersky_attack_alert_ungroked" ]
           }

           if "kaspersky_attack_alert_groked" {

             date {
               locale => "fr"
               match => [ "kaspersky_timestamp", "EEEE  d MMMM yyyy HH:mm:ss", "EEEE dd MMMM yyyy HH:mm:ss" ]
               target => "kaspersky_timestamp_real"
             }

             mutate {
               remove_field => [ "kaspersky_timestamp" ]
             }

             ruby {
               code => "event.to_hash.delete_if {|field, value| value.nil? }"
             }

#           if "kaspersky_attack_alert_ungroked" in [tags] {

           } else {

               mutate {
                 add_field => {
                   "kaspersky_attack_alert_ungroked_messages" => "%{message}"
                   "kaspersky_timestamp_real" => "%{@timestamp}"
                 }
               }
           }

       } else {

           drop { }
       }

    } else {

        drop { }
    }
  }
}
