filter {

  if [type] == "syslog-reseau" and [message] =~ "TRAFFIC" {

    grok { 
      keep_empty_captures => true
      named_captures_only => true
      break_on_match => true
      patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.1.10/patterns/"
      match => { "message" => [
        "%{PA_TRAFFIC_MESSAGE_1}",
        "%{PA_TRAFFIC_MESSAGE_2}"
                              ] }
      add_field => [ "pa_traffic_received_at", "%{@timestamp}" ]
      add_tag => "pa_traffic_groked"
      tag_on_failure => [ "pa_traffic_ungroked" ]
    }

    syslog_pri {
    }

    date {
      match => [ "pa_traffic_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }

    date {
      locale => "en"
      match => [ "pa_traffic_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      timezone => "Europe/Paris"
      target => [ "pa_traffic_timestamp_received" ]
    }

    date {
      locale => "en"
      match => [ "pa_traffic_receive_time", "YYYY/MM/dd HH:mm:ss" ]
      timezone => "Europe/Paris"
      target => [ "pa_traffic_received_time" ]
    }

    date {
      locale => "en"
      match => [ "pa_traffic_generated_time", "YYYY/MM/dd HH:mm:ss" ]
      timezone => "Europe/Paris"
      target => [ "pa_traffic_generate_time" ]
    }

    date {
      locale => "en"
      match => [ "pa_traffic_session_id_time", "YYYY/MM/dd HH:mm:ss" ]
      timezone => "Europe/Paris"
      target => [ "pa_traffic_session_id_timed" ]
    }

    date {
      locale => "en"
      match => [ "pa_traffic_session_start_time", "YYYY/MM/dd HH:mm:ss" ]
      timezone => "Europe/Paris"
      target => [ "pa_traffic_session_started_time" ]
    }

    mutate {
      convert => [
        "pa_traffic_bytes_total", "integer",
        "pa_traffic_bytes_sent", "integer",
        "pa_traffic_bytes_received", "integer",
        "pa_traffic_pkts_total", "integer",
        "pa_traffic_pkts_sent", "integer",
        "pa_traffic_pkts_received", "integer",
        "pa_traffic_direction", "integer",
        "pa_traffic_nat_dst_port", "integer",
        "pa_traffic_nat_src_port", "integer",
        "pa_traffic_seq_num", "integer",
        "pa_traffic_serial", "integer",
        "pa_traffic_session_src_port", "integer",
        "pa_traffic_session_dst_port", "integer",
        "pa_traffic_session_elpased_time", "integer",
        "pa_traffic_session_id", "integer",
        "pa_traffic_session_repeat_count", "integer"
                 ]
      gsub => [ 
        "pa_traffic_rule", " ", "_",
        "pa_traffic_application", "( |-)", "_",
        "pa_traffic_ip_or_host_src", "-", "_"
              ]
      remove_field => [
         "pa_traffic_timestamp",
         "pa_traffic_receive_time",
         "pa_traffic_generated_time",
         "pa_traffic_session_id_time",
         "pa_traffic_session_start_time",
         "pa_traffic_future_use_1",
         "pa_traffic_future_use_2",
         "pa_traffic_cpadding",
         "pa_traffic_syslog_pri",
         "pa_traffic_future_use_1",
         "pa_future_use_2",
         "syslog_severity_code",
         "syslog_facility_code",
         "syslog_facility"
                      ]
      rename => [ "syslog_severity", "pa_traffic_log_level" ]
      
      }

      geoip {
        source => "pa_traffic_dst_ip"
        database => "/etc/logstash/geoip/GeoLiteCity.dat"
        target => "pa_traffic_dst_geoip"
      }
      
      if "pa_traffic_ungroked" in [tags] {

        mutate {
          add_field => [ "pa_traffic_ungroked_messages", "%{message}" ]
        }
      }

  } else if [type] == "syslog-reseau" and [message] =~ "THREAT" {

    grok {
      keep_empty_captures => true
      named_captures_only => true
      break_on_match => true
      patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.1.10/patterns/"
      match => { "message" => [ "%{PA_THREAT_MESSAGE}" ] }
      add_tag => "pa_threat_groked"
      tag_on_failure => [ "pa_threat_ungroked" ]
    }

    syslog_pri {
    }

    date {
      match => [ "pa_threat_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }

    date {
      locale => "en"
      match => [ "pa_threat_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      timezone => "Europe/Paris"
      target => [ "pa_threat_timestamp_received" ]
    }

    date {
      locale => "en"
      match => [ "pa_threat_receive_time", "YYYY/MM/dd HH:mm:ss" ]
      timezone => "Europe/Paris"
      target => [ "pa_threat_received_time" ]
    }

    date {
      locale => "en"
      match => [ "pa_threat_generated_time", "YYYY/MM/dd HH:mm:ss" ]
      timezone => "Europe/Paris"
      target => [ "pa_threat_generate_time" ]
    }

    date {
      locale => "en"
      match => [ "pa_threat_session_id_time", "YYYY/MM/dd HH:mm:ss" ]
      timezone => "Europe/Paris"
      target => [ "pa_threat_session_id_timed" ]
    }

    mutate {
      convert => [
        "pa_threat_nat_dst_port", "integer",
        "pa_threat_nat_src_port", "integer",
        "pa_threat_seq_num", "integer",
        "pa_threat_serial", "integer",
        "pa_threat_session_src_port", "integer",
        "pa_threat_session_dst_port", "integer",
        "pa_threat_session_elpased_time", "integer",
        "pa_threat_session_id", "integer",
        "pa_threat_session_repeat_count", "integer"
                 ]
      gsub => [
        "pa_threat_ip_or_host_src", "-", "_",
        "pa_threat_rule", " ", "_",
        "pa_threat_application", "( |-)", "_",
        "pa_threat_misc", "(\")", "",
        "pa_threat_id", "[\(\)]", ""
              ]
      remove_field => [
         "pa_threat_syslog_pri",
         "pa_threat_timestamp",
         "pa_threat_receive_time",
         "pa_threat_generated_time",
         "pa_threat_session_id_time",
         "pa_threat_future_use_1",
         "pa_threat_future_use_2",
         "pa_threat_undef",
         "syslog_severity_code",
         "syslog_facility_code",
         "syslog_facility"
                      ]
      rename => [ "syslog_severity", "pa_threat_log_level" ]
      }

    if "pa_threat_ungroked" in [tags] {

      mutate {
        add_field => [ "pa_threat_ungroked_messages", "%{message}" ]
      }
    }

  } else if [type] == "syslog-reseau" and [message] =~ "GET" {

      grok {
        keep_empty_captures => true
        named_captures_only => true
        break_on_match => true
        patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.1.10/patterns/"
        match => { "message" => [ "%{SQUID_MESSAGE}" ] }
        add_field => [
          "squid_received_at", "%{@timestamp}",
          "squid_request_url_resolv", "%{squid_request_url}"
                     ]
        add_tag => "squid_groked"
        tag_on_failure => [ "squid_ungroked" ]
      }

      syslog_pri {
      }

      date {
        match => [ "squid_timestamp", "dd/MM/YYYY HH:mm:ss", " d/MM/YYYY HH:mm:ss" ]
      }

      date {
        locale => "en"
        match => [ "squid_timestamp", "dd/MM/YYYY HH:mm:ss", " d/MM/YYYY HH:mm:ss" ]
        timezone => "Europe/Paris"
        target => [ "squid_timestamp_received" ]
      }

      mutate {
        convert => [
         "squid_request_port", "integer",
         "squid_http_version", "integer",
         "squid_http_status_code", "integer",
         "squid_cache_value", "integer",
         "squid_bit_transaction", "integer"
                   ]
        gsub => [
         "squid_ip_or_host_src", "-", "_",
         "squid_request_category", " ", "_"
                ]
        remove_field => [
         "squid_syslog_pri",
         "squid_syslog_program",
         "squid_timestamp",
         "syslog_severity_code",
         "syslog_facility_code",
         "syslog_facility"
                      ]
        rename => [ "syslog_severity", "squid_log_level" ]
      }

      if [squid_request_url] =~ "\b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\.?|\b)" {

        dns {
          resolve => [ "squid_request_url_resolv" ]
        }
 
#        mutate {
#          split => { "squid_request_url_resolv" => "," }
#          add_field => [ "squid_request_url_resolve", "%{[squid_request_url_resolv][1]}" ]
#          remove_field => [ "squid_request_url_resolv" ]
#        }

#        geoip {
#          source => "squid_request_url_resolve"
#          database => "/etc/logstash/geoip/GeoLiteCity.dat"
#          target => "squid_dst_geoip"
#        }
      
#      } else {

#          geoip {
#            source => "squid_request_ip_or_domain"
#            database => "/etc/logstash/geoip/GeoLiteCity.dat"
#            target => "squid_dst_geoip"
#          }
      }
 
#      if [squid_request_url] =~ "\b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\.?|\b)" {

#        dns {
#          resolve => [ "squid_request_url_resolv" ]
#        }

#        mutate {
#          split => { "squid_request_url_resolv" => "," }
#          add_field => [ "squid_request_url_resolve", "%{[squid_request_url_resolv][1]}" ]
#          remove_field => [ "squid_request_url_resolv" ]
#        }   

#        geoip {
#          source => "squid_request_url_resolve"
#          database => "/etc/logstash/geoip/GeoLiteCity.dat"
#          target => "squid_dst_geoip"
#        }
#      }

  } else if [type] == "syslog-reseau" and [message] !~ "(TRAFFIC|THREAT)" {

      drop { }
  }
}
