filter {

  if [type] == "wineventlog" {

    mutate {
      gsub => [
        "message", "\r\n", " ",
        "message", "\n", " ",
        "message", "\t", " ",
        "message", "\$", " ",
        "message", "  ", " ",
        "message", "   ", " "
              ]
    }

    if [log_name] == "Security" and [event_id] == 4625 or [event_id] == 4768 or [event_id] == 4771 or [event_id] == 4772 or [event_id] == 4776 {

      grok {
        keep_empty_captures => true
        named_captures_only => true
        break_on_match => true
        patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.1.10/patterns/"
        match => { "message" => [
          "%{AD_LOGON_FAILURE_MESSAGE_4625}",
          "%{AD_LOGON_FAILURE_MESSAGE_4768}",
          "%{AD_LOGON_FAILURE_MESSAGE_4771}",
          "%{AD_LOGON_FAILURE_MESSAGE_4776}"
                                ] }
        add_tag => "ad_failed_logon_groked"
        tag_on_failure => [ "ad_failed_logon_ungroked" ]
      }

      if "ad_failed_logon_groked" in [tags] {

        mutate {
          remove_field => [ "beat" ]
          rename => [
            "category", "ad_category",
            "computer_name", "ad_computer_name",
            "count", "ad_count",
            "event_id", "ad_event_id",
            "level", "ad_level",
            "log_name", "ad_log_name",
            "record_number", "ad_record_number",
            "source_name", "ad_source_name"
                      ]
          update => { "type" => "ad_event_log" }
          gsub => [ "ad_workstation_src", "[\\]", "" ]
          convert => [
            "ad_session_type", "integer",
            "ad_record_number", "integer",
            "ad_src_prt", "integer",
            "ad_client_prt", "integer",
            "ad_pre_auth_type", "integer",
            "ad_key_lenght", "integer"
                     ]
          remove_field => [
            "ad_end_message",
            "ad_ipv6"
                          ]
        }

        if [ad_failure_state] == "0xc000006d" and [ad_sub_failure_state] == "0xc0000064" { 

          mutate {
            update => { "ad_failure_reason" => "Compte utilisateur inexistant" } 
            add_tag => [ "ad_logon_failure" ]
          }

        } else if [ad_failure_state] == "0xc000006d" and [ad_sub_failure_state] == "0xc000006a" {

            mutate {
              update => { "ad_failure_reason" => "Mot de passe incorrect" }
              add_tag => [ "ad_logon_failure" ]
            }

        } else if [ad_failure_code] == "0x18" {

            mutate {
              add_field => { "ad_failure_reason" => "Mot de passe incorrect" }
              add_tag => [ "ad_logon_failure" ]
            }

        } else if [ad_error_code] == "0xc0000064" {

            mutate {
              add_field => { "ad_failure_reason" => "Compte utilisateur inexistant" }
              add_tag => [ "ad_logon_failure" ]
            }

        } else if [ad_error_code] == "0xc000006a" {

            mutate {
              add_field => { "ad_error_reason" => "Mot de passe incorrect" }
              add_tag => [ "ad_logon_failure" ]
            }

        } else if [ad_error_code] == "0x0" {

            drop { }

        } else {

            mutate {
              remove_field => [ "beat" ]
              rename => [
                "category", "ad_category",
                "computer_name", "ad_computer_name",
                "count", "ad_count",
                "event_id", "ad_event_id",
                "level", "ad_level",
                "log_name", "ad_log_name",
                "record_number", "ad_record_number",
                "source_name", "ad_source_name",
                "type", "ad_type"
                        ]
              convert => [
                "ad_session_type", "integer",
                "ad_record_number", "integer",
                "ad_src_prt", "integer",
                "ad_client_prt", "integer",
                "ad_pre_auth_type", "integer",
                "ad_key_lenght", "integer"
                        ]
              update => { "type" => "ad_event_log" }
              gsub => [ "ad_workstation_src", "[\\]", "" ]
              add_tag => [ "ad_logon_failure" ]
            }
        }

      } else {

          mutate {
            remove_field => [ "beat" ]
            rename => [
              "category", "ad_category",
              "computer_name", "ad_computer_name",
              "count", "ad_count",
              "event_id", "ad_event_id",
              "level", "ad_level",
              "log_name", "ad_log_name",
              "record_number", "ad_record_number",
              "source_name", "ad_source_name"
                     ]
            convert => [
              "ad_session_type", "integer",
              "ad_record_number", "integer",
              "ad_src_prt", "integer",
              "ad_client_prt", "integer",
              "ad_pre_auth_type", "integer",
              "ad_key_lenght", "integer"
                       ]
            update => { "type" => "ad_event_log" }
            add_field => [ "ad_ungroked_messages", "%{message}" ]
          }
      }

    } else {

        drop { }
    } 
  }
}
