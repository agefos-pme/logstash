input {

  stdin { }

  beats {
    port => 5044
  }
}

filter {

  if [type] == "wineventlog" {

    mutate {
      gsub => [
        "message", "\r\n", " ",
        "message", "\n", " ",
        "message", "\t", " ",
        "message", "\$", " ",
        "message", "  ", " ",
        "message", "   ", " "
              ]
    }

    if [level] == "Information" and [log_name] == "Security" and [source_name] == "Microsoft-Windows-Security-Auditing" {

        mutate {
          remove_field => [ "beat" ]
          rename => [
            "category", "ad_category",
            "computer_name", "host",
            "count", "ad_count",
            "event_id", "ad_event_id",
            "level", "ad_level",
            "log_name", "ad_log_name",
            "record_number", "ad_record_number",
            "source_name", "ad_source_name"
                      ]
          convert => [
            "ad_count", "integer",
            "ad_event_id", "integer",
            "ad_record_number", "integer"
                     ]
          update => { "type" => "ad-log" }
        }

        if [type] == "ad-log" and [ad_event_id] == 4776 {

          if [message] =~ "0x0" {

            drop { }

          } else {

              grok {
                keep_empty_captures => true
                named_captures_only => true
                break_on_match => true
                patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.1.10/patterns/"
                match => { "message" => [ "%{AD_LOGON_FAILURE_4776_MESSAGE}" ] }
                add_field => { "timestamp_real" => "%{@timestamp}" }
                add_tag => "ad_logon_failed_groked"
                tag_on_failure => [ "ad_logon_failed_ungroked" ]
              }

              mutate {
                gsub => [
                  "ad_workstation", "[\\]", "",
                  "ad_workstation", "[\\\\]", "",
                  "ad_workstation", "[\\\\\\\\]", ""
                        ]
              }

              if "ad_logon_failed_groked" in [tags] and [ad_error_code] == "0xc0000064" {

                mutate {
                  add_field => { "ad_error_reason" => "Compte utilisateur inexistant" }
                  add_tag => [ "ad_logon_failure" ]
                }

              } else if "ad_logon_failed_groked" in [tags] and [ad_error_code] == "0xc000006a" { 

                  mutate {
                    add_field => { "ad_error_reason" => "Mot de passe incorrect" }
                    add_tag => [ "ad_logon_failure" ]
                  }

              } else if "ad_logon_failed_groked" in [tags] and [ad_error_code] == "0xc0000234" {

                  mutate {
                    add_field => { "ad_error_reason" => "Compte uitlisateur verrouillÃ©" }
                    add_tag => [ "ad_logon_failure" ]
                  }

              } else if "ad_logon_failed_groked" in [tags] and [ad_error_code] == "0xc0000071" {

                  mutate {
                    add_field => { "ad_error_reason" => "Mot de passe expirÃ©" }
                    add_tag => [ "ad_logon_failure" ]
                  }

              } else {

                  mutate {
                    add_field => { "ad_error_reason" => "Code inconnu" }
                    add_tag => [ "ad_logon_failure" ]
                  }
              }

              ruby {
                code => "event.to_hash.delete_if {|field, value| value.nil? }"
              }

           }
              if "ad_logon_failed_ungroked" in [tags] {

                mutate {
                  add_field => {
                    "ad_logon_failed_ungroked_messages" => "%{message}"
                    "timestamp_real" => "%{@timestamp}"
                  } 
                }
              }
        
        } else if [type] == "ad-log" and [ad_event_id] == 4625 {

            grok {
              keep_empty_captures => true
              named_captures_only => true
              break_on_match => true
              patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.1.10/patterns/"
              match => { "message" => [ "%{AD_LOGON_FAILURE_4625_MESSAGE}" ] }
              add_field => { "timestamp_real" => "%{@timestamp}" }
              add_tag => "ad_logon_failed_groked"
              tag_on_failure => [ "ad_logon_failed_ungroked" ]
            }

            mutate {
              gsub => [
                "ad_account_domain", "-", "",
                "ad_account_name", "-", "",
                "ad_package_name", "-", "",
                "ad_process_caller_name", "-", "",
                "ad_srvc_transit", "-", ""
                      ]
                
              convert => [
                "ad_session_type", "integer",
                "ad_src_prt", "integer"
                         ]
              remove_field => [
                "ad_ipv6",
                "ad_end_message"
                         ]
            }

            if "ad_logon_failed_groked" in [tags] and [ad_failure_state] == "0xc000006d" and [ad_sub_failure_state] == "0xc0000064" {

              mutate {
                update => { "ad_failure_reason" => "Compte utilisateur inexistant" }
                add_tag => [ "ad_logon_failure" ]
              }

            } else if "ad_logon_failed_groked" and [ad_failure_state] == "0xc000006d" and [ad_sub_failure_state] == "0xc000006a" {

                mutate {
                  update => { "ad_failure_reason" => "Mot de passe incorrect" }
                  add_tag => [ "ad_logon_failure" ]
                }
            }

            ruby {
              code => "event.to_hash.delete_if {|field, value| value.nil? }"
            }

            if "ad_logon_failed_ungroked" in [tags] {

               mutate {
                 add_field => [ "ad_logon_failed_ungroked_messages", "%{message}" ]
               }
            }

        } else if [type] == "ad-log" and [ad_event_id] == 4771 {

            grok {
              keep_empty_captures => true
              named_captures_only => true
              break_on_match => true
              patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.1.10/patterns/"
              match => { "message" => [ "%{AD_LOGON_FAILURE_4771_MESSAGE}" ] }
              add_field => { "timestamp_real" => "%{@timestamp}" }
              add_tag => "ad_logon_failed_groked"
              tag_on_failure => [ "ad_logon_failed_ungroked" ]
            }

            mutate {
              convert => [
                "ad_pre_auth_type", "integer",
                "ad_client_prt", "integer"
                         ]
              remove_field => [
                "ad_ipv6",
                "ad_end_message"
                         ]
            }

            if [ad_failure_code] == "0x18" {

              mutate {
                add_field => { "ad_failure_reason" => "Mot de passe incorrect" }
                add_tag => [ "ad_logon_failure" ]
              }
            }

            ruby {
              code => "event.to_hash.delete_if {|field, value| value.nil? }"
            }

            if "ad_logon_failed_ungroked" in [tags] {

               mutate {
                 add_field => {
                   "ad_logon_failed_ungroked_messages" => "%{message}"
                   "timestamp_real" => "%{@timestamp}"
                 }
               }
            }

        } else {

            drop { }
        }

    } else { 

        drop { }
    }
  }
}

output {

  stdout {
    codec => rubydebug
  }

  if [type] == "ad-log" and "ad_logon_failure" in [tags] {

    elasticsearch {
      host => localhost
      index => "agefos-ad-logon-failure-groked-%{+YYYY.MM.dd}"
      protocol => "http"
      template => "/etc/logstash/templates/ad.json"
      template_name => "ad"
      template_overwrite => true
      manage_template => true
    }

  } else if [type] == "ad-log" and "ad_failed_logon_ungroked" in [tags] {

      elasticsearch {
        host => localhost
        index => "agefos-ad-logon-failure-ungroked-%{+YYYY.MM.dd}"
        protocol => "http"
        template => "/etc/logstash/templates/ad.json"
        template_name => "ad"
        template_overwrite => true
        manage_template => true
      }
  }
}
