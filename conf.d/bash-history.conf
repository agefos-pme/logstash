input {

  stdin { }

  tcp {
    type => "bash-history-log"
    port => 5138
  }
}

filter {

  if [type] == "bash-history-log" {

    grok {
      keep_empty_captures => true
      named_captures_only => true
      break_on_match => true
#      patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.1.10/patterns/"
      patterns_dir => "/etc/logstash/patterns/"
      match => { "message" => [
        "(?:<%{POSINT:bash_history_syslog_pri}>)?%{SYSLOGTIMESTAMP:bash_history_timestamp} %{IPORHOST:bash_history_host} %{USER:bash_history_user}: %{USER:bash_history_logname}(?:%{SPACE}{1,2})(?:%{IP:bash_history_ssh_client_ip} %{POSINT} %{POSINT})?(?: \[%{POSINT:bash_history_user_pid}\]): (?<bash_history_timestamp_cmd>%{YEAR}\-%{MONTHNUM}\-%{MONTHDAY} %{TIME})?%{GREEDYDATA:bash_history_cmd}"
                              ] }
      add_field => [ "bash_history_received_at", "%{@timestamp}" ]
      add_tag => "bash_history_groked"
      tag_on_failure => [ "bash_history_ungroked" ]
    }

    syslog_pri {
    }

    date {
      locale => "en"
      timezone => "Europe/Paris"
      match => [ "bash_history_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      target => [ bash_history_timestamp_cmd_end ]
    }

    date {
      locale => "en"
      timezone => "Europe/Paris"
      match => [ "bash_history_timestamp_cmd", "YYYY-MM-dd HH:mm:ss" ]
      target => [ "bash_history_timestamp_cmd_start" ]
    }

    mutate {
      remove_field => [
       "bash_history_syslog_pri",
       "bash_history_syslog_pri",
       "bash_history_timestamp",
       "bash_history_timestamp_cmd",
       "syslog_severity_code",
       "syslog_facility_code",
       "syslog_facility"
                      ]
      strip => [ "bash_history_cmd" ]
    }

    if "bash_history_ungroked" in [tags] {

      mutate {
        add_field => [ "bash_history_ungroked_messages", "%{message}" ]
      }
    }

  } else {
     
      drop { }
  }   
}

output {

  stdout {
    codec => rubydebug
  }

  if [type] == "bash-history-log" and "bash_history_groked" in [tags] {

    elasticsearch {
#      host => localhost
      hosts => ["es"]
      index => "agefos-bash-history-groked-%{+YYYY.MM.dd}"
#      template => "/etc/logstash/templates/bash-history.json"
#      template_name => "bash-history"
#      template_overwrite => true
#      manage_template => true
    }

  } else if [type] == "bash-history-log" and "bash_history_ungroked" in [tags] {

      elasticsearch {
#        host => localhost
        hosts => ["es"]
        index => "agefos-bash-history-ungroked-%{+YYYY.MM.dd}"
#        template => "/etc/logstash/templates/bash-history.json"
#        template_name => "bash-history"
#        template_overwrite => true
#        manage_template => true
      }
   }
}
