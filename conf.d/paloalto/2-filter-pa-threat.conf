filter {

  if [type] == "fw-network-log" and [message] =~ "THREAT" {

    mutate {
      update => { "type" => "pa-threat-log" }
    }

    grok {
      keep_empty_captures => true
      named_captures_only => true
      break_on_match => true
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" => [ "%{PA_THREAT_MESSAGE}" ] }
      add_tag => "pa_threat_groked"
      tag_on_failure => [ "pa_threat_ungroked" ]
    }

    if "pa_threat_groked" in [tags] {

      date {
        match => [ "pa_threat_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        timezone => "Europe/Paris"
        target => [ "pa_threat_real_timestamp" ]
      }

      mutate {
        remove_field => [
          "pa_threat_syslog_pri",
          "pa_threat_timestamp",
          "pa_threat_receive_timestamp",
          "pa_threat_generated_timestamp",
          "pa_threat_session_id_timestamp",
          "pa_threat_future_use_1",
          "pa_threat_future_use_2",
          "pa_threat_undef"
                        ]
        convert => [
          "pa_threat_nat_dst_port", "integer",
          "pa_threat_nat_src_port", "integer",
          "pa_threat_seq_num", "integer",
          "pa_threat_serial", "integer",
          "pa_threat_session_src_port", "integer",
          "pa_threat_session_dst_port", "integer",
          "pa_threat_session_elpased_time", "integer",
          "pa_threat_session_id", "integer",
          "pa_threat_session_repeat_count", "integer"
                   ]
      }   

      ruby {
        code => "event.to_hash.delete_if {|field, value| value.nil? }"
      }

    } else {

        mutate {
          add_field => [ "pa_threat_ungroked_messages", "%{message}" ]
        }
    }
  }
}

