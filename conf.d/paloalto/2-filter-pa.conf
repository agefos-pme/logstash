filter {

  if [type] == "fw-network-log" and [message] =~ "TRAFFIC" {

    mutate {
      update => { "type" => "pa-traffic-log" }
    }

    grok {
      keep_empty_captures => true
      named_captures_only => true
      break_on_match => true
      patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.1.10/patterns/"
      patterns_dir => "/etc/logstash/templates/patterns/"
      match => { "message" => [
        "%{PA_TRAFFIC_MESSAGE_1}",
        "%{PA_TRAFFIC_MESSAGE_2}"
                              ] }
      add_tag => "pa_traffic_groked"
      tag_on_failure => [ "pa_traffic_ungroked" ]
    }

    if "pa_traffic_groked" in [tags] {

      date {
        match => [ "pa_traffic_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        timezone => "Europe/Paris"
        target => [ "pa_traffic_real_timestamp" ]
      }

      mutate {
        remove_field => [
          "pa_syslog_pri",
          "pa_traffic_timestamp",
          "pa_traffic_receive_timestamp",
          "pa_traffic_generated_timestamp",
          "pa_traffic_session_id_timestamp",
          "pa_traffic_session_start_timestamp",
          "pa_traffic_future_use_1",
          "pa_traffic_future_use_2",
          "pa_traffic_cpadding",
          "pa_traffic_syslog_pri",
          "pa_traffic_future_use_1",
          "pa_future_use_2"
                       ]
        convert => [
          "pa_traffic_bytes_total", "integer",
          "pa_traffic_bytes_sent", "integer",
          "pa_traffic_bytes_received", "integer",
          "pa_traffic_pkts_total", "integer",
          "pa_traffic_pkts_sent", "integer",
          "pa_traffic_pkts_received", "integer",
          "pa_traffic_direction", "integer",
          "pa_traffic_nat_dst_port", "integer",
          "pa_traffic_nat_src_port", "integer",
          "pa_traffic_seq_num", "integer",
          "pa_traffic_serial", "integer",
          "pa_traffic_session_src_port", "integer",
          "pa_traffic_session_dst_port", "integer",
          "pa_traffic_session_elpased_time", "integer",
          "pa_traffic_session_id", "integer",
          "pa_traffic_session_repeat_count", "integer"
                   ]

      }

      geoip {
        source => "pa_traffic_dst_ip"
        database => "/etc/logstash/geoip/GeoLiteCity.dat"
        target => "pa_traffic_dst_geoip"
      }

      ruby {
        code => "event.to_hash.delete_if {|field, value| value.nil? }"
      }

    } else {

        mutate {
          add_field => [ "pa_traffic_ungroked_messages", "%{message}" ]
        }
    }
  }
}
