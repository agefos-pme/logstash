filter {

  if [type] == "squid-proxy-log" {

    mutate {
      update => { "type" => "squid-log" }
    }

    grok {
      keep_empty_captures => true
      named_captures_only => true
      break_on_match => true
      patterns_dir => "/etc/logstash/patterns/"
      match => { "message" => [ "%{SQUID_MESSAGE}" ] }
      add_tag => "squid_groked"
      tag_on_failure => [ "squid_ungroked" ]
    }

    if "squid_groked" in [tags] {

      date {
        match => [ "squid_timestamp", "dd/MM/YYYY HH:mm:ss", " d/MM/YYYY HH:mm:ss" ]
        timezone => "Europe/Paris"
        target => [ "squid_real_timestamp" ]
      }

      mutate {
        remove_field => [
         "squid_timestamp",
         "squid_syslog_program",
         "squid_syslog_pri"
                        ]
        convert => [
          "squid_request_port", "integer",
          "squid_http_version", "float",
          "squid_http_status_code", "integer",
          "squid_cache_value", "integer",
          "squid_bit_transaction", "integer"
                   ]
       }

       if [squid_request_url] =~ "\b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\.?|\b)" {

         dns {
           resolve => [ "squid_request_url" ]
           add_field => { "squid_request_url_resolved" => "%{[squid_request_url][-1]}" }
         }

         ruby {
           code => "event['squid_request_url'].pop()"
         }

         mutate {
           join => { "squid_request_url" => "" }
         }

         geoip {
           source => "squid_request_url_resolved"
           database => "/etc/logstash/geoip/GeoLiteCity.dat"
           target => "squid_dst_geoip"
         } 

       } else {

           geoip {
             source => "squid_request_url"
             database => "/etc/logstash/geoip/GeoLiteCity.dat"
             target => "squid_dst_geoip"
           }
       } 

       ruby {
         code => "event.to_hash.delete_if {|field, value| value.nil? }"
       } 

    } else {

        mutate {
          add_field => [ "squid_ungroked_messages", "%{message}" ]
        }
     }
  }
}
