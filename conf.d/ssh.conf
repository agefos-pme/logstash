input {

  file {
    type => "ssh-log"
    path => "/var/log/secure"
  }

  tcp {
    type => "ssh-log"
    port => 5139
  }
}

filter {

  if [type] == "ssh-log" {

    grok {
      keep_empty_captures => true
      named_captures_only => true
      break_on_match => true
#      patterns_dir => "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-0.4.0/patterns/"
      patterns_dir => "/etc/logstash/patterns/"
      match => { "message" => [ 
        "%{SSH_VALID_INVALID}",
        "%{SSH_PAM_SESSION}",
        "%{SSH_CHECK_PAM_PASSWD}",
        "%{SSH_AUTH_FAILURE}",
        "%{SSH_AUTH_FAILURE_DOMAIN}",
        "%{SSH_CONNECTION_STATE}",
        "%{SSH_DISCONNECT}",
        "%{SSH_DISCONNECTING}",
        "%{SSH_PAM_AUTH_FAILURE}",
        "%{SSH_PAM_MAX_RETRIES}",
        "%{SSH_UNKNOW_USER}",
        "%{SSH_INVALID_USER}",
        "%{SSH_INPUT_USER_AUTH}",
        "%{SSH_CHECK_PASS_AUTH}",
        "%{SSH_SUDO}"
                              ] }
      add_tag => "ssh_groked"
      tag_on_failure => [ "ssh_ungroked" ]
    }

    date {
      locale => "en"
      timezone => "Europe/Paris"
      match => [ "ssh_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      target => "timestamp_real"
    }

    mutate {
      gsub => [
        "ssh_pam_mechanism", "[\(\)]", "",
        "ssh_pam_pid", "-", ""
              ]
      remove_field => [ 
        "ssh_timestamp",
        "ssh_program_and_pid",
        "syslog_pri"
                      ]
      rename => [
        "path", "ssh_path",
        "program", "ssh_program",
        "pid", "ssh_pid"
                ] 
      lowercase => [ "ssh_user_domain" ]
      convert => [
         "ssh_authentication_number_attempt_failure", "integer",
         "ssh_pid", "integer",
         "ssh_uid", "integer",
         "ssh_user_uid", "integer",
         "ssh_user_euid", "integer",
         "ssh_port", "integer"
                 ]
    }

    ruby {
      code => "event.to_hash.delete_if {|field, value| value.nil? }"
    }

    if "ssh_ungroked" in [tags] {

      mutate {
        add_field => {
          "ssh_ungroked_messages" => "%{message}"
          "timestamp_real" => "%{@timestamp}"
        }
      }
    }
  }
}

output {

  stdout {
    codec => rubydebug
  }

  if [type] == "ssh-log" and "ssh_groked" in [tags] {

    elasticsearch {
#      host => localhost
      hosts => ["elasticsearch"]
      index => "agefos-ssh-groked-%{+YYYY.MM.dd}"
#      protocol => "http"
#      template => "/etc/logstash/templates/ssh.json"
#      template_name => "ssh"
#      template_overwrite => true
#      manage_template => true
    }

  } else if [type] == "ssh-log" and "ssh_ungroked" in [tags] {

      elasticsearch {
#        host => localhost
        hosts => ["elasticsearch"]
        index => "agefos-ssh-ungroked%{+YYYY.MM.dd}"
#        protocol => "http"
#        template => "/etc/logstash/templates/ssh.json"
#        template_name => "ssh"
#        template_overwrite => true
#        manage_template => true
      }
  }
}
