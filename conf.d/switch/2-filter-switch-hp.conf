filter {

  if [type] == "sw-hp-network-log" {

    mutate {
      update => { "type" => "sw-hp-log" }
    }

    grok {
      keep_empty_captures => true
      named_captures_only => true
      break_on_match => true
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" => [ "%{SWITCH_HP_MESSAGE}" ] }
      add_tag => "sw_hp_groked"
      tag_on_failure => [ "sw_hp_ungroked" ]
    }

    if "sw_hp_groked" in [tags] {

      date {
        match => [ "swith_hp_timestamp", "MMM  d HH:mm:ss YYYY", "MMM dd HH:mm:ss YYYY" ]
        timezone => "Europe/Paris"
        target => [ "swith_hp_real_timestamp" ]
      }

      mutate {
        remove_field => [
          "swith_hp_syslog_pri",
          "swith_hp_timestamp",
          "switch_hp_vendor"
                        ]
      }

      ruby {
        code => "event.to_hash.delete_if {|field, value| value.nil? }"
      }

    } else {

        mutate {
          add_field => [ "sw_hp_ungroked_messages", "%{message}" ]
        } 
     }
  }
}
